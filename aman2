```zip
ecommerce_project/
├── manage.py
├── ecommerce/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   ├── wsgi.py
├── shop/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── migrations/
│   │   ├── __init__.py
│   ├── models.py
│   ├── urls.py
│   ├── views.py
│   ├── static/
│   │   ├── css/
│   │   │   ├── styles.css
│   │   ├── js/
│   │   │   ├── cart.js
│   ├── templates/
│   │   ├── base.html
│   │   ├── product_list.html
│   │   ├── product_detail.html
│   │   ├── cart.html
│   │   ├── order_summary.html
├── requirements.txt
```

### File Contents

#### requirements.txt
```
Django==4.2
```

#### manage.py
```python
#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ecommerce.settings")
    from django.core.management import execute_from_command_line
    execute_from_command_line(sys.argv)
```

#### ecommerce/settings.py
```python
import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent
SECRET_KEY = 'your-secret-key-here'  # Replace with a secure key
DEBUG = True
ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'shop',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ecommerce.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecommerce.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / "shop/static"]
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
```

#### ecommerce/urls.py
```python
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('shop.urls')),
]
```

#### shop/models.py
```python
from django.db import models

class Product(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    image = models.CharField(max_length=200, blank=True)
    stock = models.PositiveIntegerField()

    def __str__(self):
        return self.name

class Order(models.Model):
    created_at = models.DateTimeField(auto_now_add=True)
    total_price = models.DecimalField(max_digits=10, decimal_places=2)
    status = models.CharField(max_length=20, default='Pending')

class OrderItem(models.Model):
    order = models.ForeignKey(Order, related_name='items', on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
```

#### shop/admin.py
```python
from django.contrib import admin
from .models import Product, Order, OrderItem

admin.site.register(Product)
admin.site.register(Order)
admin.site.register(OrderItem)
```

#### shop/urls.py
```python
from django.urls import path
from . import views

urlpatterns = [
    path('', views.product_list, name='product_list'),
    path('product/<int:pk>/', views.product_detail, name='product_detail'),
    path('cart/', views.cart_view, name='cart'),
    path('cart/add/<int:product_id>/', views.add_to_cart, name='add_to_cart'),
    path('cart/remove/<int:product_id>/', views.remove_from_cart, name='remove_from_cart'),
    path('order/create/', views.create_order, name='create_order'),
    path('order/<int:order_id>/', views.order_summary, name='order_summary'),
]
```

#### shop/views.py
```python
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib import messages
from .models import Product, Order, OrderItem
from django.views.decorators.http import require_POST

def product_list(request):
    products = Product.objects.all()
    return render(request, 'product_list.html', {'products': products})

def product_detail(request, pk):
    product = get_object_or_404(Product, pk=pk)
    return render(request, 'product_detail.html', {'product': product})

def cart_view(request):
    cart = request.session.get('cart', {})
    cart_items = []
    total_price = 0
    for product_id, quantity in cart.items():
        product = get_object_or_404(Product, id=product_id)
        item_total = product.price * quantity
        cart_items.append({'product': product, 'quantity': quantity, 'total': item_total})
        total_price += item_total
    return render(request, 'cart.html', {'cart_items': cart_items, 'total_price': total_price})

@require_POST
def add_to_cart(request, product_id):
    product = get_object_or_404(Product, id=product_id)
    if product.stock <= 0:
        messages.error(request, f"{product.name} is out of stock.")
        return redirect('product_list')
    cart = request.session.get('cart', {})
    cart[str(product_id)] = cart.get(str(product_id), 0) + 1
    request.session['cart'] = cart
    messages.success(request, f"{product.name} added to cart.")
    return redirect('cart')

@require_POST
def remove_from_cart(request, product_id):
    cart = request.session.get('cart', {})
    if str(product_id) in cart:
        del cart[str(product_id)]
        request.session['cart'] = cart
        messages.success(request, "Item removed from cart.")
    return redirect('cart')

@require_POST
def create_order(request):
    cart = request.session.get('cart', {})
    if not cart:
        messages.error(request, "Your cart is empty.")
        return redirect('cart')
    
    order = Order.objects.create(total_price=0)
    total_price = 0
    for product_id, quantity in cart.items():
        product = get_object_or_404(Product, id=product_id)
        if product.stock < quantity:
            messages.error(request, f"Not enough stock for {product.name}.")
            order.delete()
            return redirect('cart')
        product.stock -= quantity
        product.save()
        item_price = product.price * quantity
        OrderItem.objects.create(order=order, product=product, quantity=quantity, price=item_price)
        total_price += item_price
    order.total_price = total_price
    order.save()
    request.session['cart'] = {}
    messages.success(request, "Order placed successfully!")
    return redirect('order_summary', order_id=order.id)

def order_summary(request, order_id):
    order = get_object_or_404(Order, id=order_id)
    return render(request, 'order_summary.html', {'order': order})
```

#### shop/templates/base.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>E-Commerce Site</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container">
            <a class="navbar-brand" href="{% url 'product_list' %}">E-Shop</a>
            <div class="navbar-nav">
                <a class="nav-link" href="{% url 'product_list' %}">Products</a>
                <a class="nav-link" href="{% url 'cart' %}">Cart</a>
            </div>
        </div>
    </nav>
    <div class="container mt-4">
        {% if messages %}
            {% for message in messages %}
                <div class="alert alert-{{ message.tags }}">{{ message }}</div>
            {% endfor %}
        {% endif %}
        {% block content %}
        {% endblock %}
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
```

#### shop/templates/product_list.html
```html
{% extends 'base.html' %}
{% load static %}

{% block content %}
<h2>Products</h2>
<div class="row">
    {% for product in products %}
    <div class="col-md-4 mb-4">
        <div class="card">
            {% if product.image %}
            <img src="{{ product.image }}" class="card-img-top" alt="{{ product.name }}">
            {% endif %}
            <div class="card-body">
                <h5 class="card-title">{{ product.name }}</h5>
                <p class="card-text">${{ product.price }}</p>
                <a href="{% url 'product_detail' product.id %}" class="btn btn-primary">View Details</a>
                <form method="post" action="{% url 'add_to_cart' product.id %}">
                    {% csrf_token %}
                    <button type="submit" class="btn btn-success">Add to Cart</button>
                </form>
            </div>
        </div>
    </div>
    {% empty %}
    <p>No products available.</p>
    {% endfor %}
</div>
{% endblock %}
```

#### shop/templates/product_detail.html
```html
{% extends 'base.html' %}
{% load static %}

{% block content %}
<h2>{{ product.name }}</h2>
<div class="row">
    <div class="col-md-6">
        {% if product.image %}
        <img src="{{ product.image }}" class="img-fluid" alt="{{ product.name }}">
        {% endif %}
    </div>
    <div class="col-md-6">
        <h3>${{ product.price }}</h3>
        <p>{{ product.description }}</p>
        <p>Stock: {{ product.stock }}</p>
        <form method="post" action="{% url 'add_to_cart' product.id %}">
            {% csrf_token %}
            <button type="submit" class="btn btn-success">Add to Cart</button>
        </form>
        <a href="{% url 'product_list' %}" class="btn btn-secondary">Back to Products</a>
    </div>
</div>
{% endblock %}
```

#### shop/templates/cart.html
```html
{% extends 'base.html' %}
{% load static %}

{% block content %}
<h2>Your Cart</h2>
{% if cart_items %}
<table class="table">
    <thead>
        <tr>
            <th>Product</th>
            <th>Quantity</th>
            <th>Price</th>
            <th>Total</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        {% for item in cart_items %}
        <tr>
            <td>{{ item.product.name }}</td>
            <td>{{ item.quantity }}</td>
            <td>${{ item.product.price }}</td>
            <td>${{ item.total }}</td>
            <td>
                <form method="post" action="{% url 'remove_from_cart' item.product.id %}">
                    {% csrf_token %}
                    <button type="submit" class="btn btn-danger">Remove</button>
                </form>
            </td>
        </tr>
        {% endfor %}
    </tbody>
</table>
<h4>Total: ${{ total_price }}</h4>
<form method="post" action="{% url 'create_order' %}">
    {% csrf_token %}
    <button type="submit" class="btn btn-primary">Place Order</button>
</form>
{% else %}
<p>Your cart is empty.</p>
{% endif %}
<a href="{% url 'product_list' %}" class="btn btn-secondary">Continue Shopping</a>
{% endblock %}
```

#### shop/templates/order_summary.html
```html
{% extends 'base.html' %}
{% load static %}

{% block content %}
<h2>Order Summary</h2>
<p>Order ID: {{ order.id }}</p>
<p>Date: {{ order.created_at }}</p>
<p>Status: {{ order.status }}</p>
<table class="table">
    <thead>
        <tr>
            <th>Product</th>
            <th>Quantity</th>
            <th>Price</th>
            <th>Total</th>
        </tr>
    </thead>
    <tbody>
        {% for item in order.items.all %}
        <tr>
            <td>{{ item.product.name }}</td>
            <td>{{ item.quantity }}</td>
            <td>${{ item.price }}</td>
            <td>${{ item.price|floatformat:2 }}</td>
        </tr>
        {% endfor %}
    </tbody>
</table>
<h4>Total: ${{ order.total_price }}</h4>
<a href="{% url 'product_list' %}" class="btn btn-secondary">Back to Products</a>
{% endblock %}
```

#### shop/static/css/styles.css
```css
body {
    font-family: Arial, sans-serif;
}
.card-img-top {
    height: 200px;
    object-fit: cover;
}
.alert {
    margin-top: 10px;
}
```

#### shop/static/js/cart.js
```javascript
// Placeholder for future JavaScript enhancements
// Currently, cart actions are handled via form submissions
```

### Setup Instructions
1. **Create Virtual Environment and Install Dependencies**:
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   pip install -r requirements.txt
   ```

2. **Apply Migrations**:
   ```bash
   python manage.py makemigrations
   python manage.py migrate
   ```

3. **Create a Superuser** (for admin access):
   ```bash
   python manage.py createsuperuser
   ```

4. **Add Sample Products**:
   - Access the admin panel at `http://localhost:8000/admin/` and log in.
   - Add products with names, descriptions, prices, stock, and optional image URLs.

5. **Run the Server**:
   ```bash
   python manage.py runserver
   ```
   - Access the site at `http://localhost:8000`.

### Features
- **Product Listings**: Displays all products with name, price, and image (if provided) on the homepage.
- **Product Details Page**: Shows detailed product information, including description and stock.
- **Shopping Cart**: Session-based cart allows adding/removing items, with stock validation.
- **Order Processing**: Creates orders, updates stock, and displays an order summary.
- **CSRF Protection**: All POST requests (add to cart, remove from cart, place order) include CSRF tokens via forms.
- **Responsive Design**: Uses Bootstrap for a clean, mobile-friendly interface.
- **Admin Panel**: Manage products and orders via Django's admin interface.

### Notes
- Replace `'your-secret-key-here'` in `settings.py` with a secure key (e.g., generated via `django.core.management.utils.get_random_secret_key()`).
- The `cart.js` file is included for potential future enhancements (e.g., AJAX-based cart updates), but current functionality uses form submissions.
- Image URLs are stored as text fields; for production, consider using `ImageField` with proper file storage.
- Authentication is not implemented for simplicity but can be added using Django's built-in auth system.

This setup provides a functional e-commerce site meeting the specified requirements. Let me know if you need further customization or additional features!